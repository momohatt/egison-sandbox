(define $monomial
  (matcher
    {[<degree $> [integer]
      {[$tgt {(length tgt)}]}]
     [<power ,$x $> [integer]
      {[$tgt (match tgt (multiset string)
               {[(loop $i [1 $n]
                       <cons ,x ...>
                       !<cons ,x _>) {n}]})]}]
     [<mult ,$val $> [monomial]
      {[$tgt {(difference tgt val)}]}]
     [<mult $ $> [monomial monomial]
      {[$tgt (unique (match-all tgt (multiset string)
                       [<join $xs $ys> [xs ys]]))]}]
     [<cons $ $> [string monomial]
      {[$tgt (unique tgt)]}]
     [$ (multiset string)
      {[$tgt {tgt}]}]
     }))

(define $polynomial
  (matcher
    {[$ (multiset [integer monomial])
      {[$tgt {tgt}]}]
     }))

; x - 1
; y - 2
; z - x - y
(define $f1 {[1 {"x"}] [-1 {}]})
(define $f2 {[1 {"y"}] [-2 {}]})
(define $f3 {[1 {"z"}] [-1 {"x"}] [-1 {"y"}]})

; x^2 - 2
; y^2 - 3
; z - x - y
(define $f4 {[1 {"x" "x"}] [-2 {}]})
(define $f5 {[1 {"y" "y"}] [-3 {}]})
(define $f6 f3)

; ==============================================================================

(define $show-mono
  (lambda [$mono]
    (S.intercalate " "
      (match-all mono monomial
        {[(& <cons $x _> <power ,x $n>) (S.concat {x "**" (show n)})]}))))

(define $show-poly
  (lambda [$poly]
    (S.intercalate " + "
       (map
         (match-lambda [integer monomial]
           {[[,1 $x] (show-mono x)]
            [[,-1 $x] (S.append "-" (show-mono x))]
            [[$c $x] (S.append (show c) (show-mono x))]})
         poly))))
