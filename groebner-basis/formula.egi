(load-file "example.egi")

(define $symbol something)

(define $monomial-base (multiset [symbol integer]))

(define $monomial
  (matcher
    {[<degree $> [integer]
      {[$tgt {(sum (map snd tgt))}]}]
     [<power ,$x $> [symbol integer]
      {[$tgt (match tgt monomial-base
               {[<cons [,x $n] _> {n}]
                [_                {0}]})]}]
     [<power $ $> [symbol integer]
      {[$tgt tgt]}]
     [<mult ,$val $> [monomial]
      {[$tgt {(match-all [tgt val] [monomial-base monomial-base]
                {[[<cons [$x $n] _> !<cons [,x _] _>] [x n]]
                 [[<cons [$x $n] _> <cons [,x (& ?(gt? n $) $m)] _>] [x (- n m)]]
                 })}]}]
     [$ monomial-base
      {[$tgt {tgt}]}]
     }))

(assert-equal "degree"
  (match {} monomial {[<degree $n> n]})
  0)
(assert-equal "degree"
  (match {[x 2] [y 1]} monomial {[<degree $n> n]})
  3)
(assert-equal "power"
  (match-all {[x 2] [y 1]} monomial {[<power $x $n> [x n]]})
  {[x 2] [y 1]})
(assert-equal "power"
  (match {[x 2] [y 1]} monomial {[<power ,z $n> n]})
  0)
(assert "mult"
  (eq?/m monomial-base
         (match {[x 2] [y 1]} monomial {[<mult ,{[x 1]} $rem> rem]})
         {[y 1] [x 1]}))

(define $polynomial
  (matcher
    {[<head ,$ord $ $> [integer monomial]
      {[$tgt {(max/fn (lambda [$m1 $m2] (ord-mono (snd m1) (snd m2) ord)) tgt)}]}]
     [$ (multiset [integer monomial])
      {[$tgt {tgt}]}]
     }))

(assert-equal "head"
  (match {[1 {[x 1]}] [1 {[x 2]}]} polynomial {[<head ,{x} $n $x> [n x]]})
  [1 {[x 2]}])

(define $ord-mono-lex   ; lexicographic order
  (lambda [$l $m1 $m2]
    (match [l m1 m2] [(list symbol) monomial monomial]
      {[[<nil> _ _] <Equal>]
       [[<cons $x $xs> <power ,x $n1> <power ,x $n2>]
        (if (eq? n1 n2)
            (ord-mono-lex xs m1 m2)
            (compare n1 n2))]})))

(define $ord-mono
  (match-lambda [monomial monomial (list symbol)]
    {[[<degree $n1> <degree (& !,n1 $n2)> _]
      (compare n1 n2)]
     [[$m1 $m2 $sym-list]
      (ord-mono-lex sym-list m1 m2)]}))

(assert-equal "ord-mono" (ord-mono {[x 2]} {[x 2]} {x}) <Equal>)
(assert-equal "ord-mono" (ord-mono {[x 2]} {[x 1] [y 1]} {x y}) <Greater>)

(define $non-heads
  (lambda [$poly $ord]
    (match poly polynomial
      {[<head ,ord $c $mono> (delete-first [c mono] poly)]})))

(assert-equal "non-heads"
  (non-heads {[1 {[x 2]}] [1 {[y 1]}] [1 {}]} {x y})
  {[1 {[y 1]}] [1 {}]})

(define $negate
  (match-all-lambda polynomial
    {[<cons [$c $mono] _> [(neg c) mono]]}))

(define $mult-mono
  (match-all-lambda [monomial monomial]
    {[[<cons [$x $n] _> <cons [,x $m] _>] [x (+ n m)]]
     [[<cons [$x $n] _> !<cons [,x _] _>] [x n]]
     [{[# <cons [$x $n] _>] !<cons [,x _] _>} [x n]]
     }))

(assert "mult-mono"
  (eq?/m (multiset something)
         (mult-mono {[x 1] [y 2]} {[y 1] [z 2]})
         {[x 1] [y 3] [z 2]}))
(assert "mult-mono"
  (eq?/m (multiset something)
         (mult-mono {} {[y 1] [z 2]})
         {[y 1] [z 2]}))

(define $mult
  (match-all-lambda [[integer monomial] polynomial]
    {[[[$c1 $m1] <cons [$c2 $m2] _>]
      [(* c1 c2) (mult-mono m1 m2)]]
     }))

(assert-equal "mult"
  (mult [2 {[x 1]}] {[2 {[x 1] [y 1]}] [-1 {[x 1]}]}) ; 2x * (2xy - x)
  {[4 {[x 2] [y 1]}] [-2 {[x 2]}]})

(define $plus
  (match-all-lambda [polynomial polynomial]
    {[[<cons [$c1 $m1] _> !<cons [_ ,m1] _>] [c1 m1]]
     [[<cons [$c1 $m1] _> <cons [(& !,(neg c1) $c2) ,m1] _>] [(+ c1 c2) m1]]
     [{[# <cons [$c2 $m2] _>] !<cons [_ ,m2] _>} [c2 m2]]
     }))

(assert "plus"
  (eq?/m (multiset something)
         (plus {[2 {x y}] [-1 {x}]} {[1 {x y}] [-1 {y}]})
         {[3 {x y}] [-1 {x}] [-1 {y}]}))

(define $rewrite
  (lambda [$eqs $poly $ord]
    (match [eqs poly] [(multiset polynomial) polynomial]
      {[[<cons (& $rule <head ,ord ,1 $hf>) _> <cons [$a <mult ,hf $m'>] $rs>]
        (plus rs (mult [a m'] (negate (non-heads rule ord))))]
       [_ poly]})))

(define $normalize
  (lambda [$eqs $poly $ord]
    (let {[$poly' (rewrite eqs poly ord)]}
      (if (eq?/m polynomial poly poly') poly (normalize eqs poly' ord)))))

(define $joinable?
  (lambda [$eqs $poly $ord]
    (eq? (normalize eqs poly ord) {})))

(assert-equal "normalize"
  (normalize {f1 f2} {[-1 {y x x}] [1 {x y y}]} {x y})
  {[-1 {x x}] [1 {y y}]})
(assert "rewrite"
  (eq?/m (multiset [integer monomial-base])
         (rewrite {f1 f2} {[1 {[x 2] [y 2]}]} {x y})
         {[1 {[y 1] [x 2]}]}))

; ========================== Buchberger's algorithm ============================

(define $lcm
  (lambda [$m1 $m2]
    (match-all [m1 m2] [monomial monomial]
      {[[<power $x $n1> <power ,x $n2>]   [x (max {n1 n2})]]
       [{[# <power $x $n>] <power ,x ,0>} [x n]]})))

(assert-equal "lcm"
  (lcm {[x 2] [z 1]} {[x 1] [y 1]})
  {[x 2] [z 1] [y 1]})

(define $s-polynomial
  (lambda [$f1 $f2 $ord]
    (match [f1 f2] [polynomial polynomial]
      {[[<head ,ord ,1 $h1> <head ,ord ,1 $h2>]
        (match (lcm h1 h2) monomial
          {[(& <mult ,h1 $m1> <mult ,h2 $m2>)
            (plus (mult [1 m1] f1) (mult [-1 m2] f2))]})]
       [[<head ,ord $c1 $h1> <head ,ord $c2 $h2>]
        (s-polynomial (mult [(/ 1 c1) {}] f1) (mult [(/ 1 c2) {}] f2) ord)]
        })))

(assert-equal "s-polynomial"
  (s-polynomial f1 f2 {x y})
  {[-1 {[y 1] [x 2]}] [1 {[x 1] [y 2]}]})

(define $buchberger-loop
  (lambda [$pairs $fs $ord]
    (match pairs (list [polynomial polynomial])
      {[<nil> (interreduce fs ord)]
       [<cons [$p1 $p2] $pairs'>
        (let {[$h (normalize fs (s-polynomial p1 p2 ord) ord)]}
          (match h polynomial
            {[<nil> (buchberger-loop pairs' fs ord)]
             [<head ,ord $c _>
              (let* {[$h' (mult [(/ 1 c) {}] h)]
                     [$new-pairs (map (lambda $x [x h']) fs)]}
                (buchberger-loop {@pairs' @new-pairs}
                                 (cons (debug/fn show-poly h') fs)
                                 ord))]
             }))]
       })))

(define $all-pairs
  (lambda [$fs]
    (match-all fs (list something)
      {[<join _ <cons $f1 <join _ <cons $f2 _>>>> [f1 f2]]})))

(define $interreduce
  (lambda [$fs $ord]
    (match fs (multiset polynomial)
      {[<cons $f (& ?(joinable? $ f ord) $other)>
        (interreduce other ord)]
       [_ fs]})))

(define $buchberger
  (lambda [$fs $ord]
    (buchberger-loop (all-pairs fs) fs ord)))

(assert-equal "buchberger"
  (map show-poly (buchberger {f1 f2} {x y}))
  {"y^3 - y^2" "x^2 - y^2" "x y^2 - y^2"})
(assert-equal "buchberger"
  (map show-poly (buchberger fs1 {x y z}))
  {"z - 3" "x - 1" "y - 2"})

; ==============================================================================

(define $show-mono
  (lambda [$mono]
    (S.intercalate " "
      (match-all mono monomial
        {[<power $x $n>
          (if (eq? n 1)
              (show x)
              (S.concat {(show x) "^" (show n)}))]
         [<nil> "1"]}))))

(define $show-coeff-mono
  (lambda [$c $x]
    (match [c x] [integer monomial]
      {[[,1         <nil>] "+ 1"]
       [[,-1        <nil>] "- 1"]
       [[?(gt? $ 0) <nil>] (S.append "+ " (show c))]
       [[?(lt? $ 0) <nil>] (S.append "- " (show (neg c)))]
       [[,1         $x]    (S.append "+ " (show-mono x))]
       [[,-1        $x]    (S.append "- " (show-mono x))]
       [[?(gt? $ 0) $x]    (S.concat {"+ " (show c) (show-mono x)})]
       [[?(lt? $ 0) $x]    (S.concat {"- " (show (neg c)) (show-mono x)})]
       })))

(define $show-coeff-mono-head
  (lambda [$c $x]
    (match [c x] [integer monomial]
      {[[,1         <nil>] "1"]
       [[,-1        <nil>] "- 1"]
       [[?(gt? $ 0) <nil>] (show c)]
       [[?(lt? $ 0) <nil>] (S.append "- " (show (neg c)))]
       [[,1         $x]    (show-mono x)]
       [[,-1        $x]    (S.append "- " (show-mono x))]
       [[?(gt? $ 0) $x]    (S.append (show c) (show-mono x))]
       [[?(lt? $ 0) $x]    (S.concat {"- " (show (neg c)) (show-mono x)})]
       })))

(define $show-poly
  (match-lambda (list [integer monomial])
    {[<nil> "0"]
     [<cons $x $xs>
      (let {[$first (show-coeff-mono-head x)]}
        (S.intercalate " " {first @(map show-coeff-mono xs)}))]}))

(define $debug/fn
  (macro [$show $x]
    (io (do {[(print (show x))]}
          (return x)))))
