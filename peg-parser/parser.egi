;;
;; PEG parser in Egison pattern match
;;

; syntax of target language
(define $expr
  (algebraic-data-matcher
    {<lam string expr>
     <app expr expr>
     <var string>
     <add expr expr>
     <sub expr expr>
     <mult expr expr>
     <div expr expr>
     <int integer>}))

; lexeme
(define $L.number (pattern-function [$x $p] <parse-number x <sc p>>))
(define $L.char   (pattern-function [$x $p] <parse-char   x <sc p>>))
(define $L.string (pattern-function [$x $p] <parse-string x <sc p>>))
(define $L.ident  (pattern-function [$x $p] <parse-ident  x <sc p>>))

; helper functions for left associatives
(define $leftOpExpr1
  (lambda [$acc $tgt]
    (match tgt parser
      {[(L.char ,c#+ <opExpr2 $e $p>) (leftOpExpr1 <Add acc e> p)]
       [(L.char ,c#- <opExpr2 $e $p>) (leftOpExpr1 <Sub acc e> p)]
       [_ {[acc tgt]}]})))

(define $leftOpExpr2
  (lambda [$acc $tgt]
    (match tgt parser
      {[(L.char ,c#* <appExpr $e $p>) (leftOpExpr2 <Mult acc e> p)]
       [(L.char ,c#/ <appExpr $e $p>) (leftOpExpr2 <Div acc e> p)]
       [_ {[acc tgt]}]})))

(define $leftAppExpr
  (lambda [$acc $tgt]
    (match tgt parser
      {[<atomExpr $e $p> (leftAppExpr <App acc e> p)]
       [_ {[acc tgt]}]})))

; the parser
(define $parser
  (matcher
    {[<expr' $ $> [expr parser]
      {[$tgt (match tgt parser
               {[<opExpr1 $e $r>    {[e r]}]
                [<lambdaExpr $e $r> {[e r]}]
                [_ {}]})]}]
     [<lambdaExpr $ $> [expr parser]
      {[$tgt (match tgt parser
               {[(L.char ,c#\\ (L.ident $x (L.string ,"->" <expr' $e $r>)))
                 {[<Lam x e> r]}]
                [_ {}]})]}]

     [<opExpr1 $ $> [expr parser]
      {[$tgt (match tgt parser
               {[<opExpr2 $e $r> (leftOpExpr1 e r)]
                [_ {}]})]}]
     [<opExpr2 $ $> [expr parser]
      {[$tgt (match tgt parser
               {[<appExpr $e $r> (leftOpExpr2 e r)]
                [_ {}]})]}]
     [<appExpr $ $> [expr parser]
      {[$tgt (match tgt parser
               {[<atomExpr $e $r> (leftAppExpr e r)]
                [_ {}]})]}]
     [<atomExpr $ $> [expr parser]
      {[$tgt (match tgt parser
               {[(L.number $n $r) {[<Int n> r]}]
                [(L.ident $x $r)  {[<Var x> r]}]
                [(L.string ,"(" <expr' $s (L.string ,")" $r)>) {[s r]}]
                [_ {}]})]}]

     ;; literals
     [<parse-number $ $> [integer parser]
      {[$tgt (match tgt string
               {[<regex ,"[0-9]+" <nil> $num $r> {[(read num) r]}]
                [_ {}]})]}]
     [<parse-char $ $> [char parser]
      {[$tgt (match tgt string
               {[<cons $c $r> {[c r]}]
                [_ {}]})]}]
     [<parse-string $ $> [string parser]
      {[$tgt (match-all tgt string
               {[<join $s $r> [s r]]})]}]
     [<parse-ident $ $> [string parser]
      {[$tgt (match tgt string
               {[<regex ,"[a-z][A-Za-z0-9]*" <nil> $x $r> {[x r]}]
                [_ {}]})]}]

     ; space consumer
     [<sc $> [parser]
      {[$tgt (match tgt string
               {[(loop $i [1 _]
                       <cons ?whitespace? ...>
                       (& $r !<cons ?whitespace? _>))
                 {r}]
                [_ {}]})]}]
     [<eof> []
      {[$tgt (if (S.empty? tgt) {[]} {})]}]
     [$ [something]
      {[$tgt {tgt}]}]
     }))

;;
;; Utils
;;

(define $digit?
  (lambda [$c] (c.between? c#0 c#9 c)))
(define $whitespace?
  (lambda [$c] (any (eq? $ c) {c#  c#\n c#\t})))

;;
;; Tests
;;

; literals
(assert-equal "literal"
  (match "123 4" parser {[(L.number $n (L.number $m <eof>)) [n m]]})
  [123 4])
(assert-equal "literal"
  (match "123 4" parser {[(L.number $n (L.number ,4 <eof>)) n]})
  123)
(assert-equal "literal"
  (match "123 c" parser {[(L.number $n (L.char $c <eof>)) [n c]]})
  [123 c#c])
(assert-equal "literal"
  (match "123 c" parser {[(L.number $n (L.string ,"c" <eof>)) n]})
  123)

; expressions
(assert-equal "expression"
  (match "1 + 2 + 3" parser {[<expr' $n <eof>> n]}) ; left associative
  <Add <Add <Int 1> <Int 2>> <Int 3>>)
(assert-equal "expression"
  (match "1 + 2 * 3" parser {[<expr' $n <eof>> n]})
  <Add <Int 1> <Mult <Int 2> <Int 3>>>)
(assert-equal "expression"
  (match "(1 + 2) * 3" parser {[<expr' $n <eof>> n]})
  <Mult <Add <Int 1> <Int 2>> <Int 3>>)
(assert-equal "expression"
  (match "\\x -> \\y -> x + y" parser {[<expr' $n <eof>> n]})
  <Lam "x" <Lam "y" <Add <Var "x"> <Var "y">>>>)
(assert-equal "expression"
  (match "(\\x -> \\y -> x + y) 1 2" parser {[<expr' $n <eof>> n]})
  <App <App <Lam "x" <Lam "y" <Add <Var "x"> <Var "y">>>> <Int 1>> <Int 2>>)
